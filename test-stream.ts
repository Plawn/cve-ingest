import STREAM_CHAIN from 'npm:stream-chain';
import PARSER from 'npm:stream-json';
import PICK from 'npm:stream-json/filters/Pick.js';
import IGNORE from 'npm:stream-json/filters/Ignore.js';
import STREAM_VALUES from 'npm:stream-json/streamers/StreamValues.js';
import STREAM_ARRAY from 'npm:stream-json/streamers/StreamArray.js';
import * as zlib from "https://deno.land/std/node/zlib.ts";
import { createReadStream } from "https://deno.land/std/node/fs.ts";


const chain = STREAM_CHAIN.chain;
const parser = PARSER.parser;
const pick = PICK.pick;
// const ignore = IGNORE.ignore;
// const streamValues = STREAM_VALUES.streamValues;
const streamArray = STREAM_ARRAY.streamArray;

// use blob with stream
const pipeline = chain([
    createReadStream('./src/example/partial-cpe-match.json'),
    // zlib.createGunzip(),
    parser(),
    pick({ filter: 'matches' }),
    // pick({ filter:  }),
    // ignore({ filter: /\b_meta\b/i }),
    streamArray(),
    // streamValues(),
    ({value, key}: {value: any, key: number}) => {
        // console.log(value);
        
        // keep data only for the accounting department
        // return value && value.department === 'accounting' ? data : null;
        return 10;
    }
]);

let counter = 0;
pipeline.on('data', (data) => {
    ++counter
    console.log(data);
});
pipeline.on('end', () =>
    console.log(`The accounting department has ${counter} employees.`));