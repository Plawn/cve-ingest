import { Batcher, SimpleBatcher } from "./../../utils/batcher.ts";
import { prepareDate, sha1Hex, formatDate } from "./../../utils/format.ts";
import { Persistor } from "./../../utils/persistor.ts";
import { MATCHING } from "../matching/type.ts";
import { Counter, PoolExecutor, sleep, toMs } from "../../utils/pool.ts";
import { getDateChunks } from "../../utils/utils.ts";
import { UpdateProps } from "../cve/type.ts";
import { ProgressHandler } from "../../utils/progress.ts";
import apikey from "../../../../apikey.json" assert { type: "json" };
import { MatchingChunk, MATCHINGNVD, Update, MATCHINGSearch, MATCHINGNVDResult } from "../../utils/types.ts";

const pageSize = 500;

async function getMatchingsBetweenPaged(
  start: Date,
  end: Date,
  page: number,
  pageSize: number,
// TODO : Décrire le MATCHINGNVDResult en se basant sur CVENVDResult
): Promise<MATCHINGNVDResult> {
  const startString = prepareDate(start);
  const endString = prepareDate(end);
  const startIndex = page * pageSize;
  // première ligne c'est pour une initial feeding, deuxième ligne c'est pour une update
  const url = `https://services.nvd.nist.gov/rest/json/cpematch/2.0?startIndex=${startIndex}`;
  //const url = `https://services.nvd.nist.gov/rest/json/cpematch/2.0?lastModStartDate=${startString}&lastModEndDate=${endString}&startIndex=${startIndex}`;
  console.log("using url", url);
  for (; ;) {
    try {
      const res = await fetch(url, { method: 'GET', headers: apikey});
      const text = await res.text();
      if (res.status != 200) {
        console.log("warn: going too fast");
        await sleep(toMs(5_000));
      } else {
        try {
          const value = JSON.parse(text);
          return value;
        } catch (_e) {
          console.error(res.status, text);
          // throw e;
        }
      }
    } catch (e) {
      console.error("error fetching", e);
    }
  }
}

// in Days
const timeChukSize = 30;

async function* getMatchingsBetween(
  baseStart: Date,
  baseEnd: Date,
): AsyncGenerator<MatchingChunk> {
  for (const [start, end] of getDateChunks(baseStart, baseEnd, timeChukSize)) {
    console.log(`Doing MATCHINGs between ${start} and ${end}`);
    let hasRemaining = true;
    let page = 0;

    while (hasRemaining) {
      const result = await getMatchingsBetweenPaged(start, end, page, pageSize);
      // if the result is exactly the size of the page then we waste one query
      hasRemaining = (result.matchStrings.length >= pageSize);
      const expectedPages = result.totalResults / pageSize;
      page++;
      yield { result, page, expectedPages, start, end, hasRemaining };
    }
  }
}


function getUpdatedMatchingsSince(start: Date, upTo: Date) {
  const matchings = getMatchingsBetween(start, upTo);
  return matchings;
}


const getGenerator = (since: Date, upTo: Date, props?: UpdateProps) => {
  if (props) {
    return getMatchingsBetween(props.startDate, props.endDate);
  } else {
    return getUpdatedMatchingsSince(since, upTo);
  }
};


async function doOnePage(
  chunk: MatchingChunk,
  counter: Counter,
  // pendingPages: Counter,
  batcher: Batcher<unknown>,
  progressHandler: ProgressHandler<Date>,
) {
  const {
    result,
    page,
    expectedPages,
  } = chunk;
  console.log("doing page", page, "of expected pages", expectedPages);
  const start = new Date().getTime();
  // add streaming here maybe
  const re = result.matchStrings
    .map((c) =>
      handleOne(c.matchString)
        .then((e) => {
          batcher.enqueue(e);
          counter.increment();
        })
    );
  // TODO Comprendre ce que ça fait vraiment ça. On attend que toutes les nouvelles entrées soient terminées d'être traitées là c'est ça ?
  await Promise.all(re);
  const end = new Date().getTime();
  const took = (end - start) / 1000;
  console.log(`page ${page} took ${took} s`);
  // ça je me dis que le garder peut être  intéressant si le script crash au milieu d'une exec, on peut repartir propre
  // progressHandler.addChunk({
  //   itemCount: re.length,
  //   start: chunkSart,
  //   end: chunkEnd,
  //   done: !hasRemaining,
  //   count: page,
  //   getBucketId: () => `${chunkSart}${chunkEnd}`,
  // });
}


async function handleOne(
  item: MATCHINGNVD
  ): Promise<MATCHINGSearch> {

  const matching = {
    id: item.matchCriteriaId,
    criteria: item.criteria,
    created: formatDate(new Date(item.created)),
    lastModified: formatDate(new Date(item.lastModified)),
    cpeLastModified: formatDate(new Date(item.cpeLastModified)),
    status: item.status,
    matches: item.matches,
  }
    return (matching);
}

export class MATCHINGIngester {
  protected batcher: SimpleBatcher<MATCHING>;
  protected persistor: Persistor<MATCHING, { id: string }>;
  protected readonly progressHandler: ProgressHandler<Date>;
  protected pool: PoolExecutor;
  protected updatePersistor: Persistor<Update, number>;
  constructor(
    persistor: Persistor<MATCHING, { id: string }>,
    updatePersistor: Persistor<Update, number>,
  ) {
    this.pool = new PoolExecutor(1);
    this.batcher = new SimpleBatcher<MATCHING>(5000, this.flusher, this.pool);
    this.persistor = persistor;
    this.updatePersistor = updatePersistor;
  }
  populateMatchings = async (props?: UpdateProps) => {
    const counter = new Counter();
    const upTo = new Date();
    // On récupère la date de dernière modification, l'id 3 pointant sur la date dernière modif des MATCHINGs
    const dbLastUpdate = await this.updatePersistor.findOne(3);
    console.log(`Last MATCHING update done : ${dbLastUpdate?.last_update}`);
    // Avant C'était 2, avec 1, je rends ça séquentiel, plus simple à traiter
    // Il faudrait traiter en mode séquentiel, donc plus besoin de pool, ni de batcher
    const pool = new PoolExecutor(1);
    const start = new Date().getTime();
    const batcher = new SimpleBatcher(1000, this.flusher, pool);
    // Si on n'a pas d'entrée pour la dernière maj, on fait du 01/01/1900 à upTo
    for await (const r of getGenerator(dbLastUpdate ? dbLastUpdate.last_update : new Date("01-01-1990"), upTo)) {
      // ça c'est avec le pool, je veux le faire séquentiellement maintenant
      pool.submit(() =>
        doOnePage(r, counter, batcher, this.progressHandler)
      );

    }
    console.log("all download done, waiting for handlers to finish");
    await pool.isEmpty();
    // C'est cette fonction qui va faire les persist de tous les batchs à la fin.
    await batcher.flush();

    const end = new Date().getTime();
    const took = (end - start) / 1000;

    console.log(`done: ${counter.get()} in ${took} s`);
    console.log(`did ${counter.get() / took} items/s`);

    // On ne vérifie pas l'intégrité de chaque chunk ==> pourquoi si le code existe ?? 
    // await this.cveInfos.ensureChunksIntegrity(upTo); // checking that all the data does exist
    await this.updatePersistor.persistOne({
      id: 1,
      last_update: upTo,
    });
  }
  /**
   * Called when a batcher is flushed with the batch being flushed
   * @param batch
   * @returns
   */
  protected flusher = async (batch: MATCHING[]) => {
    const size = batch.length;
    if (size === 0) {
      return;
    }
    console.log("doing batch");
    const start = new Date().getTime();
    const batchInsertResult = await this.persistor.persistMany(batch);

    const end = new Date().getTime();
    console.log("batch insert took", end - start, "for", batchInsertResult);
  };
}