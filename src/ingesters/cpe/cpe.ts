import { Batcher, SimpleBatcher } from "./../../utils/batcher.ts";
import { prepareDate, formatDate } from "./../../utils/format.ts";
import { Persistor } from "./../../utils/persistor.ts";
import { CPE } from "./type.ts";
import { Counter, PoolExecutor, sleep, toMs } from "../../utils/pool.ts";
import { CpeChunk, CPENVD, Update, CPESearch, CPENVDResult } from "../../utils/types.ts";
import { getDateChunks } from "../../utils/utils.ts";
import { UpdateProps } from "../cve/type.ts";
import apikey from "../../../../apikey.json" assert { type: "json" };

// The value is based on the maximum possible for the API given by NVD
const pageSize = 10000;

/**
 * Makes the queries to the NVD API based on params 
 * @param page page number to fetch
 * @param pageSize maximum size of page to fetch
 * @param initiatePersistance boolean to know if we persist everything of simply update
 * @param start if we update, start date of the update
 * @param end if we update, end date of the update
 * @returns CPEs from the API as json
 */
async function getCpesBetweenPaged(
  page: number,
  initiatePersistance: boolean,
  start?: Date,
  end?: Date,
): Promise<CPENVDResult> {
  let url = "";
  const startIndex = page * pageSize;
  // We want to update our existing database
  if (!initiatePersistance && start && end) {

    const startString = prepareDate(start);
    const endString = prepareDate(end);
    url = `https://services.nvd.nist.gov/rest/json/cpes/2.0?lastModStartDate=${startString}&lastModEndDate=${endString}&startIndex=${startIndex}`;
  }
  // We want to initiate our Database
  else {
    url = `https://services.nvd.nist.gov/rest/json/cpes/2.0?startIndex=${startIndex}`;
  }
  // Keep trying until we get a parsable answer
  for (; ;) {
    try {
      const res = await fetch(url, { method: 'GET', headers: apikey});
      await sleep(toMs(600));
      const text = await res.text();
      if (res.status != 200) {
        console.log(`warn: got status ${res.statusText}`);
        await sleep(toMs(6_000));
      } else {
        try {
          const value = JSON.parse(text);
          console.log(`could get good answer for index ${startIndex}`)
          return value;
        } catch (_e) {
          console.error(res.status, text);
          // throw e;
        }
      }
    } catch (e) {
      console.error(" --------------------------------------------------------------------------\n--------------------------------------------------------------------------\nError fetching", e);
    }
  }
}

// in Days, arbitrary value
const timeChunkSize = 30;

/**
 * Gives the values that we got from the NVD API to the batcher in order to get persisted
 * @param initiatePersistance boolean to know if we persist everything of simply update
 * @param baseStart if we update, start date of the update
 * @param baseEnd if we update, end date of the update
 * @returns a Chunk
 */
async function* getCpesBetween(
  initiatePersistance: boolean,
  baseStart?: Date,
  baseEnd?: Date,
): AsyncGenerator<CpeChunk> {
  // We create timeChunkSize Chunks to get so that we make smaller requests which are easier to handle by the network
  if (!initiatePersistance && baseStart && baseEnd) {
    for (const [start, end] of getDateChunks(baseStart, baseEnd, timeChunkSize)) {  
      console.log(`Doing CPEs between ${start} and ${end}`);
      let hasRemaining = true;
      let page = 0;
      
      while (hasRemaining) {
        const result = await getCpesBetweenPaged(page, initiatePersistance, start, end);
        // if the result is exactly the size of the page then we waste one query
        hasRemaining = (result.products.length >= pageSize);
        const expectedPages = result.totalResults / pageSize;
        page++;
        yield { result, page, expectedPages, start, end, hasRemaining };
      }
    }
  } else {
    // We get all the values split into several pages if necessary by the NVD API
    console.log("Doing all the CPEs existing");
    let hasRemaining = true;
    let page = 0;
    
    while (hasRemaining) {
      const result = await getCpesBetweenPaged(page, initiatePersistance);
      // if the result is exactly the size of the page then we waste one query
      hasRemaining = (result.products.length >= pageSize);
      const expectedPages = result.totalResults / pageSize;
      page++;
      yield { result, page, expectedPages, hasRemaining };
    }
  }
}

/**
 * Gives the values that we got from the NVD API to the batcher in order to get persisted
 * @param chunk chunk to be persisted which contains the CPEs to persist, the page number and the expected pages number
 * @param counter counter used for logs
 * @param batcher batcher that will persist values
 */
async function doOnePage(
  chunk: CpeChunk,
  counter: Counter,
  batcher: Batcher<unknown>,
) {
  const {
    result,
    page,
    expectedPages
  } = chunk;
  console.log("doing page", page, "of expected pages", expectedPages);
  const start = new Date().getTime();
  const re = result.products
    .map((c) =>
      handleOne(c.cpe)
        .then((e) => {
          // We give the cpe to the batcher so that it can be persisted
          batcher.enqueue(e);
          counter.increment();
        })
    );
  await Promise.all(re);
  const end = new Date().getTime();
  const took = (end - start) / 1000;
  console.log(`page ${page} took ${took} s`);
}


  /**
   * Gets the information from the item and outputs the cpe with the right format to be handled by the persistor
   * @param item CPE from the API to format
   * @returns CPE formatted from item
   */
async function handleOne(
  item: CPENVD
  ): Promise<CPESearch> {
  const cpe = {
    id: item.cpeNameId,
    created_at: formatDate(new Date(item.created)),
    updated_at: formatDate(new Date(item.lastModified)),
    product: item.cpeName.split(":")[4],
    version: item.cpeName.split(":")[5],
    cpe: item.cpeName
  }

    return (cpe);
}

// This value should never be used
const EARLIEST_DATE = new Date("01-01-1980");


/**
 * Main function Gets all the CPEs from the NVD API and then submits them to a pool that has to give them to the batcher that will persist the CPEs to the database
 * @param batcher batcher that uses the persistor
 * @param persistor persistor that does the right PostreSQL queries
 * @param pool pool that sends CPEs to the batcher
 * @param updatePersistor persistor that validates in the database the update
 */
export class CPEIngester {
  protected batcher: SimpleBatcher<CPE>;
  protected persistor: Persistor<CPE, { id: string }>;
  protected pool: PoolExecutor;
  protected updatePersistor: Persistor<Update, string>;
  constructor(
    persistor: Persistor<CPE, { id: string }>,
    updatePersistor: Persistor<Update, string>,
  ) {
    this.pool = new PoolExecutor(5);
    // The size of the batcher is arbitrary
    this.batcher = new SimpleBatcher<CPE>(5000, this.flusher, this.pool);
    this.persistor = persistor;
    this.updatePersistor = updatePersistor;
  }
  populateCpes = async (props?: UpdateProps) => {
    const counter = new Counter();
    const upTo = new Date();
    // We get the date of last update from the database 
    const dbLastUpdate = await this.updatePersistor.findOne('CPE');
    console.log(`Last CPE update done : ${dbLastUpdate?.last_update}`);
    const start = new Date().getTime();
    // We iterate on all our results and submit them to be persisted. 
    // !(dbLastUpdate) is InitiatePersistance, if true we need to get all the CPEs, if false we update the db
    for await (const r of getCpesBetween( !(dbLastUpdate), dbLastUpdate ? dbLastUpdate.last_update : EARLIEST_DATE, upTo)) {
      this.pool.submit(() =>
        doOnePage(r, counter, this.batcher)
      );

    }
    console.log("all download done, waiting for handlers to finish");
    // We wait for the pool to have submitted all the CPEs to the batcher to be persisted
    await this.pool.isEmpty();
    
    await this.batcher.flush();

    const end = new Date().getTime();
    const took = (end - start) / 1000;

    console.log(`done: ${counter.get()} in ${took} s`);
    console.log(`did ${counter.get() / took} items/s`);

    // Once done, we validate the last update using our upTo value which is when we started fetching from the NVD
    await this.updatePersistor.persistOne({
      id: 1,
      last_update: upTo,
      name: "CPE",
    });
  }
  /**
   * Called when a batcher is flushed with the batch being flushed
   * @param batch
   * @returns
   */
  protected flusher = async (batch: CPE[]) => {
    const size = batch.length;
    if (size === 0) {
      return;
    }
    console.log("doing batch");
    const start = new Date().getTime();
    const batchInsertResult = await this.persistor.persistMany(batch);

    const end = new Date().getTime();
    console.log("batch insert took", end - start, "for", batchInsertResult);
  };
}