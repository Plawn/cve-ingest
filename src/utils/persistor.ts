// deno-lint-ignore-file require-await
import { BulkWriteResult, Collection, MongoClient } from "npm:mongodb@5.0.1";
import { Client } from "https://deno.land/x/postgres@v0.17.1/mod.ts";
 




export interface Persistor<
  T,
  Identifier, // should add constraint on > Identifier part of T
> {
  /**
   * Find the first item corresponding to the criteria
   * <p>
   * Can only be found by the identifier
   * @param i
   */
  findOne(i: Identifier): Promise<T | undefined>;
  persistOne(items: T): Promise<boolean>;
  persistMany(items: T[]): Promise<number>;
  open(): Promise<void>;
  close(): Promise<void>;
}

// deno-lint-ignore ban-types
type Obj = {};

type UpdateSchema =  Obj & {id: number, last_update: Date};

// ADDITION //

  // TODO : Rename PersistorFactory
  export interface PgPersistorFactory {
    make<Schema extends Obj, Identifier extends Obj>(
      databaseName: string,
      feedType: string,
      getIdentifier: (t: Schema) => Identifier,
    ): Promise<Persistor<Schema, Identifier>>;
  }
// END ADDITION // 

export interface PersistorFactory {
  make<Schema extends Obj, Identifier extends Obj>(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema, Identifier>>;
}

export class DebugPersistorFactory implements PersistorFactory {
  async make<Schema extends Obj, Identifier extends Obj>(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema, Identifier>> {
    return new DebugPersistor(databaseName, collectionName, getIdentifier);
  }
}



export class MongoPersistorFactory implements PersistorFactory {
  client: MongoClient;
  constructor(client: MongoClient) {
    this.client = client;
  }

  async make<Schema extends Obj, Identifier extends Obj>(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema, Identifier>> {
    const persistor = new MongoPersistor(
      databaseName,
      collectionName,
      getIdentifier,
      this.client,
    );
    
    return persistor;
  }
}

function countBulkOperations(result: BulkWriteResult) {
  const { insertedCount, modifiedCount, deletedCount, upsertedCount } = result;
  return (
    insertedCount + modifiedCount + deletedCount + upsertedCount
  );
}

/**
 * This only prints to log the data that should have been persisted
*/
export class DebugPersistor<T, I> implements Persistor<T, I> {
  databaseName: string;
  collectionName: string;
  getIdentifier: (t: T) => I;
  constructor(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: T) => I,
  ) {
    this.databaseName = databaseName;
    this.collectionName = collectionName;
    this.getIdentifier = getIdentifier;
  }
  
  async persistMany(items: T[]): Promise<number> {
    console.log(items);
    return items.length;
  }
  
  async findOne(_i: I): Promise<T | undefined> {
    return undefined;
  }
  
  async persistOne(items: T): Promise<boolean> {
    await this.persistMany([items]);
    return true;
  }
  async close(): Promise<void> {
    return undefined;
  }
  
  async open(): Promise<void> {
    return undefined;
  }
}

// ADDITION // 
export class PostgrePersistorFactory implements PgPersistorFactory {
  client: Client;
  constructor(client: Client) {
    this.client = client;
  }


  async make<Schema extends Obj, Identifier extends Obj>(databaseName: string, feedType: string) : Promise<Persistor<Schema, Identifier>> {
    if (feedType === "CPE") { 
      const persistor = new CPEPersistor(
        databaseName,
        this.client,
      );
      return persistor;
    } else if (feedType === "CVE") {
      const persistor = new CVEPersistor(
        databaseName,
        this.client,
      );
      return persistor;
    } else {
      const persistor = new InfosPersistor(
        databaseName,
        this.client,
      )
      return persistor;
    }
  }
}

export class CPEPersistor<
DatabaseName extends string,
Schema extends Obj,
Identifier extends Obj,
> implements Persistor<Schema, Identifier> {
  databaseName: DatabaseName;
  client: Client;

  constructor(
    databaseName: DatabaseName,
    client: Client, 
  ) {
    this.databaseName = databaseName;
    this.client = client;
    
  }
  // TODO : Regarder pour un query builder
  // TODO : process properly the items (put it in a list that is in the right order and seperate properly the items) 
  // TODO : Lister toutes les tables qu'il faut nourrir avec CPE => COTS et COTSInformation
  async persistMany(items: Schema[]): Promise<number> {
    console.log(items[0]);
    return items.length; // Number of insertions done
  }

  async open(): Promise<void> {
    await this.client.connect();
  }

  persistOne(items: Schema): Promise<boolean> {
    return this.persistMany([items]).then((e) => e === 1);
  }

  close(): Promise<void> {
    return this.client.end();
  }

  // TODO : Use a Query builder
  findOne(i: Identifier): Promise<Schema | undefined> {
    return this.client.queryArray(`use a query builder ! `) as unknown as Promise<Schema | undefined>;
  }
}

export class CVEPersistor<
DatabaseName extends string,
Schema extends Obj,
Identifier extends Obj,
> implements Persistor<Schema, Identifier> {
  databaseName: DatabaseName;
  client: Client;

  constructor(
    databaseName: DatabaseName,
    client: Client, 
  ) {
    this.databaseName = databaseName;
    this.client = client;
    
  }
   // TODO : Regarder pour un query builder
  // TODO : process properly the items (put it in a list that is in the right order and seperate properly the items) 
  // TODO : Lister toutes les tables qu'il faut nourrir avec CVE => CVE assigner CVSS3 Mark CVSS2 MArk ....
  async persistMany(items: Schema[]): Promise<number> {
    // TODO : Voir quel format est récupéré dans les items 
    // TODO :
    console.log(items.slice(0,3));
    
    //this.client.queryArray(`INSERT INTO cve (id, name) values (2, 'CVENAME2')`)
    //this.client.query(`INSERT INTO Table2 values ....`)
    return items.length; // Number of insertions done
  }

  async open(): Promise<void> {
    await this.client.connect();
  }

  persistOne(items: Schema): Promise<boolean> {
    return this.persistMany([items]).then((e) => e === 1);
  }

  close(): Promise<void> {
    return this.client.end();
  }

  // TODO : Use a Query builder
  findOne(i: Identifier): Promise<Schema | undefined> {
    return this.client.queryArray(`use a query builder ! `) as unknown as Promise<Schema | undefined>;
  }
}
  // END ADDITION //

export class InfosPersistor<
DatabaseName extends string,
Schema extends UpdateSchema,
Identifier extends Obj,
> implements Persistor<Schema, Identifier> {
  databaseName: DatabaseName;
  client: Client;

  constructor(
    databaseName: DatabaseName,
    client: Client, 
  ) {
    this.databaseName = databaseName;
    this.client = client;
    
  }
  async persistMany(items: Schema[]): Promise<number> {
    console.log("This should not ever be called")
    //this.client.query(`INSERT INTO Table2 values ....`)
    return items.length; // Number of insertions done
  }

  async open(): Promise<void> {
    await this.client.connect();
  }

  async persistOne(item: Schema): Promise<boolean> {
    console.log(`received request to persist one item: id: ${item.id} and last_update: ${item.last_update}`)
    const res = await this.client.queryArray(`UPDATE updates SET last_update='${item.last_update}' where id=${item.id}`);
    return res.rows.length;
  }

  close(): Promise<void> {
    return this.client.end();
  }

  async findOne(i: Identifier): Promise<Schema | undefined> {
    const res = await this.client.queryArray(`select last_update from updates where id = ${i}`);
    return res.rows[0];
  }
}
/**
 * Persists the data to a mongo collection using a configured mongo client
*/
export class MongoPersistor<
DatabaseName extends string,
CollectionName extends string,
Schema extends Obj,
Identifier extends Obj,
> implements Persistor<Schema, Identifier> {
  databaseName: DatabaseName;
  collectionName: CollectionName;
  getIdentifier: (t: Schema) => Identifier;
  client: MongoClient;
  collection: Collection;

  constructor(
    databaseName: DatabaseName,
    collection: CollectionName,
    getIdentifier: (t: Schema) => Identifier,
    client: MongoClient,
  ) {
    this.databaseName = databaseName;
    this.collectionName = collection;
    this.getIdentifier = getIdentifier;
    this.client = client;
    this.collection = this.client.db(this.databaseName).collection(
      this.collectionName,
    );
  }

  async persistMany(items: Schema[]): Promise<number> {
    const bulk = items.map((item) => ({
      replaceOne: {
        filter: this.getIdentifier(item),
        replacement: item,
        upsert: true,
      },
    }));
    const batchInsertResult = await this.collection.bulkWrite(
      bulk,
    );
    return countBulkOperations(batchInsertResult);
  }
  async open(): Promise<void> {
    await this.client.connect();
  }

  persistOne(items: Schema): Promise<boolean> {
    return this.persistMany([items]).then((e) => e === 1);
  }

  close(): Promise<void> {
    return this.client.close();
  }
  findOne(i: Identifier): Promise<Schema | undefined> {
    return this.collection.findOne(i) as unknown as Promise<Schema | undefined>;
  }
}
