import { BulkWriteResult, Collection, MongoClient } from "npm:mongodb@5.0.1";

export interface Persistor<T> {
  persistMany(items: T[]): Promise<number>;
  open(): Promise<void>;
  close(): Promise<void>;
}

export interface PersistorFactory {
  make<Schema extends {}, Identifier extends {}>(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema>>;
}

export class DebugPersistorFactory implements PersistorFactory {
  async make<Schema extends {}, Identifier extends {}>(
    _databaseName: string,
    _collectionName: string,
    _getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema>> {
    return new DebugPersistor();
  }
}

export class MongoPersistorFactory implements PersistorFactory {
  client: MongoClient;
  constructor(client: MongoClient) {
    this.client = client;
  }

  async make<Schema extends {}, Identifier extends {}>(
    databaseName: string,
    collectionName: string,
    getIdentifier: (t: Schema) => Identifier,
  ): Promise<Persistor<Schema>> {
    const persistor = new MongoPersistor(
      databaseName,
      collectionName,
      getIdentifier,
      this.client,
    );

    return persistor;
  }
}

function countBulkOperations(result: BulkWriteResult) {
  const { insertedCount, modifiedCount, deletedCount, upsertedCount } = result;
  return (
    insertedCount + modifiedCount + deletedCount + upsertedCount
  );
}

/**
 * This only prints to log the data that should have been persisted
 */
export class DebugPersistor<T> implements Persistor<T> {
  async persistMany(items: T[]): Promise<number> {
    console.log(items);
    return items.length;
  }
  async close(): Promise<void> {
    return undefined;
  }

  async open(): Promise<void> {
    return undefined;
  }
}

/**
 * Persists the data to a mongo collection using a configured mongo client
 */
export class MongoPersistor<
  DatabaseName extends string,
  CollectionName extends string,
  Schema extends {},
  Identifier extends {},
> implements Persistor<Schema> {
  databaseName: DatabaseName;
  collectionName: CollectionName;
  getIdentifier: (t: Schema) => Identifier;
  client: MongoClient;
  collection: Collection;

  constructor(
    databaseName: DatabaseName,
    collection: CollectionName,
    getIdentifier: (t: Schema) => Identifier,
    client: MongoClient,
  ) {
    this.databaseName = databaseName;
    this.collectionName = collection;
    this.getIdentifier = getIdentifier;
    this.client = client;
    this.collection = this.client.db(this.databaseName).collection(
      this.collectionName,
    );
  }

  async persistMany(items: Schema[]): Promise<number> {
    const batchInsertResult = await this.collection.bulkWrite(
      items.map((item) => ({
        replaceOne: {
          filter: this.getIdentifier(item),
          replacement: item,
          upsert: true,
        },
      })),
    );
    return countBulkOperations(batchInsertResult);
  }
  async open(): Promise<void> {
    await this.client.connect();
  }

  async close(): Promise<void> {
    await this.client.close();
  }
}
