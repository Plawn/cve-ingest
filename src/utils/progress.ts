// deno-lint-ignore-file require-await
type Chunk<T> = {
  start: T;
  end: T;
  done: boolean;
  count: number;
  getBucketId(): string;
  itemCount: number;
};

interface Bucket<T> {
  add(t: Chunk<T>): Promise<unknown>;
  isComplete(): Promise<boolean>;
  getSize(): Promise<number>;
}

class BasicBucket<T> implements Bucket<T> {
  cached: boolean | null = null;
  items: Chunk<T>[] = [];

  async add(t: Chunk<T>): Promise<unknown> {
    this.cached = null;
    this.items.push(t);
    return;
  }

  protected cache(result: boolean): boolean {
    this.cached = result;
    return result;
  }

  async isComplete(): Promise<boolean> {
    if (this.cached !== null) {
      return this.cached;
    }
    const lastChunk = this.items.find((e) => e.done);
    return this.cache(lastChunk?.count === this.items.length);
  }

  async getSize(): Promise<number> {
    return this.items.reduce((prev, curr) => prev + curr.itemCount, 0);
  }
}

type Saver<T> = (c: Chunk<T> & { total: number }) => Promise<unknown>;

export class ProgressHandler<T> {
  protected buckets: Record<string, Bucket<T>> = {};
  protected saver: Saver<T>;

  constructor(saver: Saver<T>) {
    this.saver = saver;
  }

  public addChunk = async (c: Chunk<T>) => {
    const id = c.getBucketId();
    if (!(id in this.buckets)) {
      this.buckets[id] = new BasicBucket();
    }
    const bucket = this.buckets[id];
    await bucket.add(c);
    if (await bucket.isComplete()) {
      // save result to db
      await this.saver({ ...c, total: await bucket.getSize() });
    }
  };
}
