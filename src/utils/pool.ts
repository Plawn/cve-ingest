export function sleep(s: number) {
  return new Promise<void>((resolve) => {
    setTimeout(() => resolve(), s);
  });
}

export class Counter {
  value = 0;
  increment() {
    this.value++;
  }
  decrement() {
    this.value--;
  }
  get() {
    return this.value;
  }
}

export class PoolExecutor {
  concurrency: number;
  protected pending = new Counter();
  protected waiting = new Counter();

  constructor(concurrency: number) {
    this.concurrency = concurrency;
  }

  getWaiting() {
    return this.waiting.get();
  }

  submit(f: () => Promise<unknown>) {
    return new Promise<void>((resolve) => {
      this.waiting.increment();
      this.isReady().then(() => {
        this.waiting.decrement();
        this.pending.increment();
        f().finally(() => {
          this.pending.decrement();
          resolve();
        });
      });
    });
  }

  protected async isReady() {
    while (this.pending.get() > this.concurrency) {
      // console.log(
      //   "waiting for concurrency to settle, current:",
      //   this.pending.get(),
      // );
      // for await (const _ of this.waiter.on("done")) {
      //   console.log('waiting')
      // };
      await sleep(100);
    }
  }

  isPending = () => {
    return this.pending.get() > 1;
  };

  async isEmpty() {
    while (this.pending.get() > 0 || this.waiting.get() > 0) {
      await sleep(5000); // ms
    }
  }
}
