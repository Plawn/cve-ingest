import STREAM_CHAIN from 'npm:stream-chain';
import PARSER from 'npm:stream-json';
import PICK from 'npm:stream-json/filters/Pick.js';
import IGNORE from 'npm:stream-json/filters/Ignore.js';
import STREAM_VALUES from 'npm:stream-json/streamers/StreamValues.js';
import STREAM_ARRAY from 'npm:stream-json/streamers/StreamArray.js';
import * as zlib from "https://deno.land/std/node/zlib.ts";
import { createReadStream } from "https://deno.land/std/node/fs.ts";



const chain = STREAM_CHAIN.chain;
const parser = PARSER.parser;
const pick = PICK.pick;
// const ignore = IGNORE.ignore;
// const streamValues = STREAM_VALUES.streamValues;
const streamArray = STREAM_ARRAY.streamArray;

export { chain, parser, pick, streamArray };

export function toStream(reader: ReadableStreamDefaultReader<Uint8Array>) {
    const stream = new ReadableStream({
        start(controller) {
            // The following function handles each data chunk
            function push() {
                // "done" is a Boolean and value a "Uint8Array"
                return reader.read().then(({ done, value }) => {
                    // Is there no more data to read?
                    if (done) {
                        // Tell the browser that we have finished sending data
                        controller.close();
                        return;
                    }

                    // Get the data and send it to the browser via the controller
                    controller.enqueue(value);
                    push();
                });
            };

            push();
        }
    });
    return stream;
}