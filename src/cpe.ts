import { CPEFeed, CPEFeedType, RawCPE } from "./api/feed.ts";
import { sha1 } from "https://denopkg.com/chiefbiiko/sha1@master/mod.ts";
import { sha1Hex } from "./utils/format.ts";
import { SimpleBatcher } from "./utils/batcher.ts";

function generateTitle(cpe: string) {
    let title = ""

    const cpe_split = cpe.split(":")
    // # Do a very basic test to see if the CPE is valid
    if (cpe_split.length == 13) {
        // # Combine vendor, product and version
        title = cpe_split.slice(3, 6).join(" ");

        // # If "other" is specified, add it to the title
        if (cpe_split[12] != "*") {
            title += cpe_split[12]
        }


        // # Capitilize each word
        // title = title.title()

        // # If the target_sw is defined, add "for <target_sw>" to title
        if (cpe_split[10] != "*") {
            title += " for " + cpe_split[10]
        }


        // # In CPE 2.3 spaces are replaced with underscores. Undo it
        title = title.replace("_", " ")

        // # Special characters are escaped with \. Undo it
        title = title.replace("\\", "")
    }



    return title
}

type CPE = {
    title: string;
    cpe_2_2: string;
    cpe_name: { cpe23Uri: string }[];
    vendor: string;
    product: string;
    id?: string;
    versionStartExcluding?: string;
    versionStartIncluding?: string;
    versionEndExcluding?: string;
    versionEndIncluding?: string;
}


function makeCpeAndVersion(item: RawCPE): [CPE, string] {
    const uri = item.cpe23Uri;
    const cpe: CPE = {
        title: generateTitle(uri),
        cpe_2_2: uri,
        cpe_name: item["cpe_name"],
        vendor: uri.split(":")[3],
        product: uri.split(":")[4],
    }

    let version_info = ""
    if ("versionStartExcluding" in item) {
        cpe["versionStartExcluding"] = item["versionStartExcluding"]
        version_info += cpe["versionStartExcluding"] + "_VSE"
    }

    if ("versionStartIncluding" in item) {
        cpe["versionStartIncluding"] = item["versionStartIncluding"]
        version_info += cpe["versionStartIncluding"] + "_VSI"
    }

    if ("versionEndExcluding" in item) {
        cpe["versionEndExcluding"] = item["versionEndExcluding"]
        version_info += cpe["versionEndExcluding"] + "_VEE"
    }

    if ("versionEndIncluding" in item) {
        cpe["versionEndIncluding"] = item["versionEndIncluding"]
        version_info += cpe["versionEndIncluding"] + "_VEI"
    }

    return [cpe, version_info]
}


function prepareCpeItem(item: any) {
    const [cpe, version_info] = makeCpeAndVersion(item);

    const sha1Hash = sha1Hex(cpe.cpe_2_2 + version_info);

    cpe.id = sha1Hash;

    return cpe;
}

async function flusher(items: CPE[]) {

}

async function upsertData(items: CPEFeedType) {
    const batcher = new SimpleBatcher<CPE>(2, flusher);
    items.match.forEach(item => {
        const prepared = prepareCpeItem(item);
        batcher.enqueue(prepared);
    })
}


export async function populateCpe() {
    const f = new CPEFeed();
    const lastUpdate = new Date(); // TODO: remove stub and fetch from DB
    if (await f.isUpToDate(lastUpdate)) {
        const result = await f.get();
        await upsertData(result);
    }

    return undefined;
}