import {
    BlobReader,
    BlobWriter,
    TextReader,
    TextWriter,
    ZipReader,
    ZipWriter,
} from "https://deno.land/x/zipjs/index.js";

export interface Feed<T> {
    isUpToDate(date: Date): Promise<boolean>;
    get(): Promise<T>;
}
export type RawCPE = {
    cpe23Uri: string;
    cpe_name: { cpe23Uri: string }[];

    versionStartExcluding?: string;
    versionStartIncluding?: string;
    versionEndExcluding?: string;
    versionEndIncluding?: string;
}


export type CPEFeedType = {
    match: RawCPE[];
}

export class CPEFeed implements Feed<CPEFeedType> {
    url = "https://nvd.nist.gov/feeds/json/cpematch/1.0/nvdcpematch-1.0.json.zip";
    getUpdateDate(r: Response): Date | undefined {
        const h = r.headers.get("last-modified");
        if (h) {
            return new Date(h);
        }
        return undefined;

    }

    async isUpToDate(date: Date) {
        const resp = await fetch(this.url, {
            method: "HEAD",
        });
        const currentLastUpdate = this.getUpdateDate(resp);
        if (currentLastUpdate!.getTime() > date.getTime()) {
            return false;
        }
        return true;

    }

    async get(): Promise<CPEFeedType> {
        const res = await fetch(this.url);
        const blob = await res.blob();
        const reader = new BlobReader(blob);
        const zipReader = new ZipReader(reader);
        console.log(reader);
        const firstEntry = (await zipReader.getEntries()).shift()!;
        const helloWorldWriter = new TextWriter();
        const helloWorldText = await firstEntry.getData(helloWorldWriter);
        return JSON.parse(helloWorldText) as CPEFeedType;
    }
}


