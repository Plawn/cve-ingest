import { ReadStream } from "https://deno.land/std@0.177.0/node/fs.ts";
import { Readable } from "https://deno.land/std@0.177.0/node/stream.ts";

import {
  BlobReader,
  BlobWriter,
  GenericTransformStream,
  TextReader,
  TextWriter,
  ZipReader,
  ZipWriter,
} from "https://deno.land/x/zipjs@v2.6.65/index.js";

export interface Feed<T> {
  isUpToDate(date: Date): Promise<boolean>;
  get(): Promise<T>;
}
export type RawCPE = {
  cpe23Uri: string;
  cpe_name: { cpe23Uri: string }[];

  versionStartExcluding?: string;
  versionStartIncluding?: string;
  versionEndExcluding?: string;
  versionEndIncluding?: string;
};

export type CPEFeedType = {
  match: RawCPE[];
};

export class CPEFeed {
  url = "https://nvd.nist.gov/feeds/json/cpematch/1.0/nvdcpematch-1.0.json.gz";
  getUpdateDate(r: Response): Date | undefined {
    const h = r.headers.get("last-modified");
    if (h) {
      return new Date(h);
    }
    return undefined;
  }

  async isUpToDate(date: Date) {
    const resp = await fetch(this.url, {
      method: "HEAD",
    });
    const currentLastUpdate = this.getUpdateDate(resp);
    if (currentLastUpdate!.getTime() > date.getTime()) {
      return false;
    }
    return true;
  }

  async get() {
    const res = await fetch(this.url);
    const r = Readable.fromWeb(res.body!);
    return r;
  }
}
