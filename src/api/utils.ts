import { Readable } from "https://deno.land/std@0.177.0/node/stream.ts";
import { PoolExecutor } from "../utils/pool.ts";

export async function blobToPooledStream(blob: Blob, pool: PoolExecutor) {
  const buffSize = 1024 * 10;
  let start = 0;
  let end = buffSize;
  const data: ArrayBuffer[] = [];
  while (true) {
    const slice = blob.slice(start, end);
    const buf = await slice.arrayBuffer();
    if (slice.size === 0) {
      break;
    }
    data.push(new Uint8Array(buf));
    start += buffSize;
    end += buffSize;
  }

  return new Readable({
    read() {
      if (data.length === 0) {
        this.push(null);
        //   console.log('all data is pushed');
      } else {
        if (pool.getWaiting() > 3) { // kinda arbitrary
          // console.log('slow');
          setTimeout(() => this.push(data.shift()), 1000);
        } else {
          if (data.length % 100) {
            setTimeout(() => this.push(data.shift()), 100);
          } else {
            this.push(data.shift());
          }
        }
      }
    },
  });
}
