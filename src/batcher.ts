
export interface Batcher<T> {
    enqueue(item: T): Promise<void>;
    flush(): Promise<void>;
}

export class SimpleBatcher<T> implements Batcher<T> {
    readonly size: number;
    protected items: T[];
    protected flusher: (items: T[]) => Promise<unknown>;
    protected flushed: Promise<unknown>[] = []; 
    constructor(
        size: number,
        flusher: (items: T[]) => Promise<unknown>
    ) {
        this.size = size;
        this.items = [];
        this.flusher = flusher;
    }

    async enqueue(item: T) {
        this.items.push(item);
        if (this.items.length === this.size) {
            return await this.flush(); // note: awaiting is not required here
        }
    }

    protected async awaitFlushing() {
        await Promise.all(this.flushed); // not optimal for performances but good for now
    }

    async flush() {
        const b = [...this.items];
        const p = this.flusher(b);
        this.items = [];
        this.flushed.push(p);
        await this.awaitFlushing();
    }
}

export class MultiBatcher<T> implements Batcher<T> {
    readonly size: number;
    readonly plexNumber: number;
    protected items: T[];
    protected batched: T[] = []; 
    protected flusher: (items: T[]) => Promise<unknown>;
    constructor(
        size: number,
        plexNumber: number,
        flusher: (items: T[]) => Promise<unknown>
    ) {
        this.size = size;
        this.plexNumber = plexNumber;
        this.items = [];
        this.flusher = flusher;
    }

    async enqueue(item: T) {
        this.items.push(item);
        if (this.items.length === this.size) {
            return await this.flush(); // note: awaiting is not required here
        }
    }

    async flush() {
        const all: Promise<unknown>[] = [];
        const chunkSize = this.size / this.plexNumber;
        for (let i = 0; i < this.items.length; i += chunkSize) {
            const chunk = this.items.slice(i, i + chunkSize);
            all.push(this.flusher(chunk));
        }
        await Promise.all(all);
        this.items = [];
    }
}