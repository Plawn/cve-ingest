


export function sleep(s: number) {
    return new Promise<void>((resolve) => {
        setTimeout(() => resolve(), s);
    });
}


export class Counter {
    value = 0;
    increment() {
        this.value++;
    }
    decrement() {
        this.value--;
    }
    get() {
        return this.value;
    }
}

export class PoolExecutor {
    concurrency: number;
    pendingPages = new Counter();
    constructor(concurrency: number) {
        this.concurrency = concurrency;
    }

    async do(f: () => Promise<any>) {
        await this.isReady();
        this.pendingPages.increment();
        f().then(() => this.pendingPages.decrement());
    }

    async isReady() {
        while (this.pendingPages.get() > this.concurrency) {
            console.log('waiting for concurrency to settle, current:', this.pendingPages.get());
            await sleep(5000); // ms
        }
    }

    async isEmpty() {
        while (this.pendingPages.get() > 1) {
            await sleep(5000); // ms
        }
    }
}