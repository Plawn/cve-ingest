import { getMongoDb } from "./conf.ts";
import { parse as parseYaml } from "https://deno.land/std@0.63.0/encoding/yaml.ts";
import { DataIngester } from "./index.ts";
import {
  DebugPersistorFactory,
  MongoPersistorFactory,
} from "./utils/persistor.ts";

async function getPersistorFactory(filename: string, isDebug: boolean) {
  if (isDebug) {
    return {
      persistor: new DebugPersistorFactory(),
      conf: debugConf
    };
  } else {
    const content = await Deno.readTextFile(filename);
    const parsed = parseYaml(content) as Conf;
    const { db, client } = getMongoDb(parsed.db.mongo.url, parsed.db.mongo.dbName)
    return {
      persistor: new MongoPersistorFactory(client),
      conf: parsed,
      db,
    };
  }
}

type MongoConf = {
  url: string;
  dbName: string;
}

type Conf = {
  db: {
    mongo: MongoConf,
  }
}

const debugConf: Conf = {
  db: {
    mongo: {
      url: 'debug',
      dbName: 'debug',
    }
  }
}

export async function ensureDataIsUpToDate() {
  const debug = Boolean(Deno.env.get("DEBUG")) || false;
  const confFile = "conf.yaml";
  const { persistor, conf, db } = await getPersistorFactory(confFile, debug);
  const ingester = new DataIngester(persistor, conf.db.mongo.dbName, db);
  await ingester.populateCPE();
  await ingester.populateCVE();
}

await ensureDataIsUpToDate();
